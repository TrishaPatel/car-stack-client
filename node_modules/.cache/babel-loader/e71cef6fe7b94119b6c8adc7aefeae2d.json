{"ast":null,"code":"import axios from 'axios';\nlet url = \"https://radiant-cliffs-13120.herokuapp.com\";\nexport function setTokenHeader(token) {\n  if (token) {\n    axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\n  } else {\n    delete axios.defaults.headers.common[\"Authorization\"];\n  }\n}\nexport function apiCall(method, path, data) {\n  return new Promise((resolve, reject) => {\n    return axios[method](`${url}${path}`, data).then(res => {\n      return resolve(res.data);\n    }).catch(err => {\n      return reject(err);\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/umipa/Desktop/carstack-client/src/services/api.js"],"names":["axios","url","setTokenHeader","token","defaults","headers","common","apiCall","method","path","data","Promise","resolve","reject","then","res","catch","err"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAIC,GAAG,GAAE,4CAAT;AAEA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAA8B;AACjC,MAAGA,KAAH,EAAS;AACLH,IAAAA,KAAK,CAACI,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAkD,UAASH,KAAM,EAAjE;AACH,GAFD,MAGI;AACA,WAAOH,KAAK,CAACI,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,CAAP;AACH;AACJ;AAED,OAAO,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,IAAzB,EAA+BC,IAA/B,EAAoC;AACvC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,WAAOb,KAAK,CAACQ,MAAD,CAAL,CAAe,GAAEP,GAAI,GAAEQ,IAAK,EAA5B,EAA+BC,IAA/B,EACNI,IADM,CACDC,GAAG,IAAI;AACT,aAAOH,OAAO,CAACG,GAAG,CAACL,IAAL,CAAd;AACH,KAHM,EAINM,KAJM,CAIAC,GAAG,IAAI;AACV,aAAOJ,MAAM,CAACI,GAAD,CAAb;AACH,KANM,CAAP;AAOH,GARM,CAAP;AASH","sourcesContent":["import axios from 'axios';\r\n\r\nlet url =\"https://radiant-cliffs-13120.herokuapp.com\";\r\n\r\nexport function setTokenHeader(token){\r\n    if(token){\r\n        axios.defaults.headers.common[\"Authorization\"] = `Bearer ${token}`;\r\n    }\r\n    else{\r\n        delete axios.defaults.headers.common[\"Authorization\"];\r\n    }\r\n}\r\n\r\nexport function apiCall(method, path, data){\r\n    return new Promise((resolve, reject) => {\r\n        return axios[method](`${url}${path}`, data)\r\n        .then(res => {\r\n            return resolve(res.data);\r\n        })\r\n        .catch(err => {\r\n            return reject(err)\r\n        });\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}